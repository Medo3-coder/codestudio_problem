
struct Node
{
  Node *links[2];    // one represent 0 
                     // other one represent 1 
    
    bool containKey(int ind)               //ind == index
    {
        return (links[ind] != NULL);
    }
    
    Node *get(int ind)
    {
       return links[ind];   // get me referance node 
    }
    
    void put(int ind , Node *node)
    {
        links[ind] = node;
    }
};

class Trie 
{
    private : Node *root ;
    public : 
    Trie()
    {
       root = new Node() ;
    }
    
    public: 
    void insert(int num) {
        Node* node = root;
        // cout << num << endl; 
        for(int i = 31;i>=0;i--) {
            int bit = (num >> i) & 1;  // is i set = 1 or not !=1
            if(!node->containKey(bit)) {
                node->put(bit, new Node()); 
            }
            node = node->get(bit); 
        }
    }
    
    public: 
    int getMax(int num)
    {
        Node *node = root ;
        int maxNum = 0 ;
        for(int i = 31 ; i >= 0 ; i--)
        {
            int bit = (num >> i) & 1 ; // is i set = 1 or not !=1
            // if node containt the oppiste
            if(node->containKey(1 - bit))  // 1 - 0 = 1 or 1-1 = 0 
            { 
                maxNum = maxNum | (1<<i); 
                node = node->get(!bit); 
            }
             else 
             {
                node = node->get(bit); 
             }
        }
        return maxNum; 
    }
};


int maxXOR(int n, int m, vector<int> &arr1, vector<int> &arr2) 
{
    Trie trie;
    for(int i = 0 ; i < n ; i++)
    {
        trie.insert(arr1[i]);
    }
    
       int maxi = 0;
    
    for(int i = 0 ; i < m ; i++)
    {
        maxi = max(maxi, trie.getMax(arr2[i])); 
    }
    return maxi;
}
