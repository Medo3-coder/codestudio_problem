
struct Node{
    Node* links[26];
    int cntEndWith = 0;
    int cntPrefix = 0;
    
    bool containsKey( char ch)
    {
        return (links[ch  - 'a'] != NULL);  //it does exist
    }
    
    Node *get(char ch)
    {
        return links[ch - 'a'];  // return where char is this pointing to 
    }
    
    void put(char ch , Node* node)
    {
        links[ch - 'a'] = node; // (a)pple => a point to new trie , give this char node
    }
    
    void increasedEnd()
    {
        cntEndWith++;
    }
    
    void increasedPrefix()
    {
        cntPrefix++;
    }
    
    void deleteEnd()
    {
        cntEndWith--;
    }
    
    void reducePrefix()
    {
        cntPrefix--;
    }
      int getEnd() {
        return cntEndWith; 
    }
    int getPrefix() {
        return cntPrefix; 
    }
};


class Trie{

private: Node *root; 
    public:

    Trie(){
        root = new Node();
    }

    void insert(string &word){
       Node *node = root;
        for(int i = 0 ; i < word.length() ; i++)
        {
            if(!node->containsKey(word[i]))
            {
                node->put(word[i] , new Node());
            }
           
            node = node->get(word[i]) ;  //move to reference trie
            
            node->increasedPrefix();   //increse prefix counter
        }
        node->increasedEnd();   //increse end counter 
    }

    int countWordsEqualTo(string &word){
         Node *node = root;
        for(int i = 0 ; i < word.length() ; i++)
        {
            if(node->containsKey(word[i]))
            {
                node = node->get(word[i]);
            }
            else
            {
                return 0;
            }
        }
        node->getEnd();    // words ends with
    }

    int countWordsStartingWith(string &word){
         Node *node = root;
        for(int i = 0 ; i < word.length() ; i++)
        {
            if(node->containsKey(word[i]))
            {
                node = node->get(word[i]);
            }
            else
            {
                return 0;
            }
        }
        
       return node->getPrefix();
    }

    void erase(string &word){
        Node *node = root;
        for(int i = 0 ; i < word.length() ; i++)
        {
            if(node->containsKey(word[i]))
            {
               node = node->get(word[i]);
                node->reducePrefix();
            }
            else
            {
                return ;
            }
        }
        
        return  node->deleteEnd();
    }
};
