struct Node{
    
   Node *links[26];
   bool flag = false;
   
    bool containsKey(char ch)
    {
        return (links[ch - 'a'] != NULL) ; //check if char exist 
    }
    
    Node *get(char ch)  
    {
        return links[ch - 'a'];    // return where char is this pointing to 
    }
    
    void put(char ch , Node *node)
    {
        links[ch - 'a'] = node ;   // (a)pple => char  point to new trie
    }
    
    void setEnd()
    {
        flag = true ;
    }
    
    bool isEnd()
    {
        return flag ;
    }
    
};

class Trie{
    private: Node *root ;
    
    public:
    /** Initialize your data structure here. */
    Trie(){
        root = new Node() ;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word){
        Node *node = root ;
        for(int i = 0 ; i < word.size() ; i++)
        {
            if(!node->containsKey(word[i]))
            {
               node->put(word[i] , new Node());
            }
            // move to the reference trie
            node = node->get(word[i]);
        }
        node->setEnd();
    }
    
    bool checkIfAllPrefixExists(string word)
    {
        Node *node = root;
        bool flag = true ;
        for(int i = 0 ; i < word.size() ; i++)
        {
            if(node->containsKey(word[i]))
            {
                node = node->get(word[i]);
                if(node->isEnd() == false) return false ;
                //flag = flag & node->isEnd(); 
            }
            else
            {
                 return false ;  //doesn't exist in trie
            }
          
        }
        
        return true ;
    }
    
};

string completeString(int n, vector<string> &a){
    Trie* obj = new Trie();
    for(auto word : a) obj->insert(word); 
    string longest = ""; 
    for(auto word: a) {
        if(obj->checkIfAllPrefixExists(word)) {
            if(word.size() > longest.size()) {
                longest = word; 
            }
         // 2 condi to   //return the lexicographically smallest one 
            else if(word.size() == longest.size() && word < longest) {
                longest = word; 
            }
        }
    }
    
    if(longest == "") return "None"; 
    return longest; 
}
