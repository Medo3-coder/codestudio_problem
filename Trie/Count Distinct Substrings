/////////////----------------------- using trie    

//----------- tc -> O(N2)



struct Node {
    Node *links[26] ; 
    bool flag = false ;
    
    bool containKey(char ch)
    {
        return (links[ch - 'a'] != NULL);
    }
    
    Node *get(char ch)
    {
        return links[ch - 'a'] ;  // where is this point to
    }
    
    void put(char ch , Node *node)    //create new refernce node 
    {
         links[ch - 'a'] = node ; // pass a and create new trie 
    }
    
    bool isEnd()
    {
        return flag ;
    }
    
    bool setEnd()
    {
        flag = true ;
    }
};


int countDistinctSubstrings(string &s)
{
    Node *root = new Node();
    int count = 0 ;
    
    int n = s.size();
    
    for(int i = 0 ; i < n ; i++)
    {
        Node *node = root ;
        for(int j = i ; j < n ; j++)
        {
            if(!node->containKey(s[j]))
            {
                node->put(s[j] , new Node());
                count++;
            }
            node = node->get(s[j]);
        } 
    }
        
    return count + 1 ;

}







  //-----------------------using sets 


/*
    Time Complexity: O(N^3)
    Space Complexity: O(N^2)

    Where 'N' is the length of the given string.
*/

#include <unordered_set>

int countDistinctSubstrings(string &s)
{
    //    For storing all distinct substrings of the given string.
    unordered_set<string> distinctStrings;

    int n = s.length();

    //    Iterate through the string.
    for (int i = 0; i < n; i++)
    {
        //    Iterate till the end.
        for (int j = i; j < n; j++)
        {
            //    Current substring
            string temp = s.substr(i, j - i + 1);

            //    Insert the current substring into the HashSet.
            distinctStrings.insert(temp);
        }
    }

    //    Return the total number of distinct substrings.
    return (distinctStrings.size() + 1);
}
